name: CI

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Django environment
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DJANGO_DEBUG: False
          DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
          CORS_ALLOWED_ORIGINS: http://localhost:3000
        run: |
          echo "DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY" >> $GITHUB_ENV
          echo "DJANGO_DEBUG=$DJANGO_DEBUG" >> $GITHUB_ENV
          echo "DJANGO_ALLOWED_HOSTS=$DJANGO_ALLOWED_HOSTS" >> $GITHUB_ENV
          echo "CORS_ALLOWED_ORIGINS=$CORS_ALLOWED_ORIGINS" >> $GITHUB_ENV

      - name: Run Django system checks
        run: python manage.py check

      - name: Run migrations
        run: python manage.py migrate

      - name: Run unit tests with coverage
        run: |
          coverage run --source=. manage.py test scheduler.tests.unit
          coverage report --show-missing
          coverage xml

      - name: Run performance tests
        run: python manage.py test scheduler.tests.performance

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false 
  quality-checks:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black bandit safety

      - name: Run Linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black . --check --diff

      - name: Run Security Checks
        run: |
          bandit -r . -x tests/ || true
          safety check || true

      - name: Generate Security Report
        run: |
          echo "âœ… Security checks completed"
          echo "- Bandit: Static security analysis"
          echo "- Safety: Dependency vulnerability check" 